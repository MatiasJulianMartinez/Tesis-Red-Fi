import "maplibre-gl/dist/maplibre-gl.css";
import { useEffect, useState, memo } from "react";
import { useNavigate } from "react-router-dom";
import { crearRese√±a } from "../services/rese√±aService";
import { cargarRese√±asEnMapa } from "../services/mapa";
import { useMapaInteractivo } from "../hooks/useMapaInteractivo";
import { useUbicacionActual } from "../hooks/useUbicacionActual";
import { useSeleccionUbicacion } from "../hooks/useSeleccionUbicacion";
import { BOUNDS_CORRIENTES } from "../constantes";

import CargandoMapa from "./mapa/CargandoMapa";
import PanelControlMapa from "./mapa/PanelControlMapa";
import ModalProveedor from "./modals/ModalProveedor";
import ModalRese√±a from "./modals/ModalRese√±a";
import ModalAgregarRese√±a from "./modals/ModalAgregarRese√±a";

const MapaInteractivo = ({ filtros }) => {
  const [alerta, setAlerta] = useState("");
  const [modalRese√±aAbierto, setModalRese√±aAbierto] = useState(false);
  const navigate = useNavigate();

  const boundsCorrientes = BOUNDS_CORRIENTES;

  const {
    mapContainer,
    mapRef,
    cargandoMapa,
    proveedorActivo,
    setProveedorActivo,
    rese√±aActiva,
    setRese√±aActiva,
    marcadoresRese√±asRef,
  } = useMapaInteractivo(filtros, boundsCorrientes);

  const { cargandoUbicacion, handleUbicacionActual } = useUbicacionActual(
    boundsCorrientes,
    setAlerta,
    mapRef
  );

  const {
    modoSeleccion,
    coordenadasSeleccionadas,
    activarSeleccion,
    desactivarSeleccion,
    limpiarSeleccion,
  } = useSeleccionUbicacion(mapRef, boundsCorrientes, setModalRese√±aAbierto);

  const handleAbrirModalRese√±a = () => {
    limpiarSeleccion();
    setModalRese√±aAbierto(true);
  };

  const handleSeleccionarUbicacion = () => {
    setModalRese√±aAbierto(false); // Cerrar modal
    activarSeleccion(); // Activar modo selecci√≥n
  };

  useEffect(() => {
    if (coordenadasSeleccionadas && !modalRese√±aAbierto) {
      setModalRese√±aAbierto(true); // Reabrir modal con coordenadas
    }
  }, [coordenadasSeleccionadas, modalRese√±aAbierto]);

  const handleAgregarRese√±a = async (rese√±aData) => {
    try {
      console.log("üì§ Datos recibidos para guardar:", rese√±aData);

      // üîß GUARDAR en Supabase con formato JSON
      const nuevaRese√±a = await crearRese√±a(rese√±aData); // o crearRese√±aSinAuth
      console.log("‚úÖ Rese√±a guardada exitosamente:", nuevaRese√±a);

      // üîß Cerrar modal y limpiar despu√©s de guardar exitosamente
      setModalRese√±aAbierto(false);
      limpiarSeleccion();

      // üîß Recargar rese√±as en el mapa
      await cargarRese√±asEnMapa(
        mapRef.current,
        setRese√±aActiva,
        filtros,
        marcadoresRese√±asRef
      );
    } catch (error) {
      console.error("‚ùå Error al enviar rese√±a:", error);
      // La modal manejar√° el error y no se cerrar√°
      throw error;
    }
  };

  const handleCerrarModal = () => {
    setModalRese√±aAbierto(false);
    if (modoSeleccion) {
      desactivarSeleccion(); // Desactivar modo selecci√≥n si est√° activo
    }
  };

  return (
    <div className="h-full w-full relative">
      {modoSeleccion && (
        <div className="absolute top-4 left-1/2 transform -translate-x-1/2 z-30 bg-primario text-white px-4 py-2 rounded-lg shadow-lg">
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 bg-white rounded-full animate-pulse"></div>
            <span className="font-medium">
              Haz clic en el mapa para seleccionar ubicaci√≥n
            </span>
            <button
              onClick={desactivarSeleccion}
              className="ml-2 text-white hover:text-red-200"
            >
              ‚úï
            </button>
          </div>
        </div>
      )}

      <PanelControlMapa
        boundsCorrientes={boundsCorrientes}
        alerta={alerta}
        setAlerta={setAlerta}
        mapRef={mapRef}
        cargandoUbicacion={cargandoUbicacion}
        onUbicacionActual={handleUbicacionActual}
        onAbrirModalRese√±a={handleAbrirModalRese√±a}
      />

      <CargandoMapa cargandoMapa={cargandoMapa} />

      <div
        ref={mapContainer}
        className={`w-full h-full transition-opacity duration-700 ease-in-out ${
          cargandoMapa ? "opacity-0" : "opacity-100"
        } ${modoSeleccion ? "cursor-crosshair" : ""}`}
        style={{
          overflow: "hidden",
          position: "relative",
          touchAction: "none",
        }}
      />

      <ModalProveedor
        proveedor={proveedorActivo}
        onClose={() => setProveedorActivo(null)}
        navigate={navigate}
      />

      <ModalRese√±a
        rese√±a={rese√±aActiva}
        onClose={() => setRese√±aActiva(null)}
      />

      <ModalAgregarRese√±a
        isOpen={modalRese√±aAbierto}
        onClose={handleCerrarModal}
        onEnviar={handleAgregarRese√±a}
        mapRef={mapRef}
        boundsCorrientes={boundsCorrientes}
        setAlerta={setAlerta}
        coordenadasSeleccionadas={coordenadasSeleccionadas}
        onSeleccionarUbicacion={handleSeleccionarUbicacion}
      />
    </div>
  );
};

export default memo(MapaInteractivo);
